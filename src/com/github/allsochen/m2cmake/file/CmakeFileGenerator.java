package com.github.allsochen.m2cmake.file;

import com.github.allsochen.m2cmake.configuration.JsonConfig;

import java.io.*;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class CmakeFileGenerator {
    private String basePath;
    private TafMakefileProperty tafMakefileProperty;
    private JsonConfig jsonConfig;

    public CmakeFileGenerator(String basePath, TafMakefileProperty tafMakefileProperty, JsonConfig jsonConfig) {
        this.basePath = basePath;
        this.tafMakefileProperty = tafMakefileProperty;
        this.jsonConfig = jsonConfig;
    }

    private String transferIncludePath(String includePath) {
        String newPath = "";
        Map<String, String> dirMappings = jsonConfig.getDirMappings();
        Iterator<Map.Entry<String, String>> iterator = dirMappings.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, String> entry = iterator.next();
            newPath = includePath;
            if (newPath.contains(entry.getKey())) {
                newPath = newPath.replace(entry.getKey(), entry.getValue());
                break;
            }
        }
        return newPath;
    }

    private String transferJceIncludePath(String jceIncludePath) {
        String newPath = "";
        Map<String, String> dirMappings = jsonConfig.getDirMappings();
        Iterator<Map.Entry<String, String>> iterator = dirMappings.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, String> entry = iterator.next();
            if (jceIncludePath.contains("/home/tafjce/DCache/API/dcacheclient.mk")) {
                jceIncludePath = jceIncludePath.replace("/home/tafjce/DCache/API/dcacheclient.mk",
                        "/home/tafjce/DCache/API/include/dcacheclient.mk");
            }
            newPath = jceIncludePath.replace("include ", "");
            newPath = newPath.substring(0, newPath.lastIndexOf("/"));
            if (newPath.contains(entry.getKey())) {
                newPath = newPath.replace(entry.getKey(), entry.getValue());
                break;
            }
        }
        return newPath;
    }

    public static File getCmakeListFile(String basePath) {
        return new File(basePath + File.separator + "CMakeLists.txt");
    }

    public void create() throws IOException {
        String app = this.tafMakefileProperty.getApp();
        String target = this.tafMakefileProperty.getTarget();
        File cmakeFile = getCmakeListFile(this.basePath);
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
                new FileOutputStream(cmakeFile), "UTF-8"));
        // Write header.
        bw.write("# This file is generated by TAF m2cmake plugin\n");
        bw.write("# http://www.github.com/allsochen/clion-m2cmake\n");
        bw.newLine();
        String cmakeVersion = "3.10";
        if (!jsonConfig.getCmakeVersion().isEmpty()) {
            cmakeVersion = jsonConfig.getCmakeVersion();
        }
        bw.write("cmake_minimum_required(VERSION " + cmakeVersion + ")");
        bw.newLine();

        bw.write("project(" + target + ")");
        bw.newLine();
        bw.write("set(CMAKE_CXX_STANDARD 11)");
        bw.newLine();

        bw.write("#set(CMAKE_CXX_FLAGS \"-std=c++11 -stdlib=libstdc++ -Wno-error=c++11-narrowing\")");
        bw.newLine();
        if (!this.tafMakefileProperty.getCxxFlags().isEmpty()) {
            bw.write("set(CMAKE_CXX_FLAGS " + this.tafMakefileProperty.getCxxFlags() + ")");
            bw.newLine();
        }

        bw.newLine();
        bw.write("#配置include");
        bw.newLine();
        List<String> configIncludes = this.jsonConfig.getIncludes();
        if (configIncludes != null) {
            for (String include : configIncludes) {
                bw.write("include_directories(" + include + ")");
                bw.newLine();
            }
        }

        bw.newLine();
        bw.write("#服务include");
        bw.newLine();
        for (String include : this.tafMakefileProperty.getIncludes()) {
            bw.write("include_directories(" + transferIncludePath(include) + ")");
            bw.newLine();
        }
        bw.newLine();

        bw.write("#服务jce目录");
        bw.newLine();
        String currentServerJcePath = "include /home/tafjce/" + app + "/" + target + "/" + target + ".mk";
        bw.write("include_directories(" + transferJceIncludePath(currentServerJcePath) + ")");
        bw.newLine();
        bw.newLine();

        bw.write("#服务依赖jce");
        bw.newLine();
        for (String include : this.tafMakefileProperty.getJceIncludes()) {
            bw.write("include_directories(" + transferJceIncludePath(include) + ")");
            bw.newLine();
        }
        bw.newLine();

        bw.write("file(GLOB_RECURSE CMAKE_FILES *.cpp *.h)");
        bw.newLine();
        bw.write("include_directories(./)");
        bw.newLine();
        bw.write("add_executable(" + target + " ${CMAKE_FILES})");
        bw.newLine();
        bw.flush();
        bw.close();
    }
}
